LAB 7

log.txt 

My partner for this project was Sydney Ng (different discussion).

We began by testing if we could log on to each other’s servers (with success).
We both used ifconfig and connected to one network via her wifi hotspot.

We can also use ifconfig to get the IP address on our respective beagle bones:
Mine: 172.31.28.64
Hers: 172.20.10.7

(We can also find the IP address of Sydney’s Beaglebone by using:
ping <ipaddress>, as discovered on the internet.
In addition, we used features like nmap when we were confused.)

(My beaglebone was accessible as a wifi access point, Beagle050937)

After this we set up guest users on both of our Beaglebones. 

We did this with the following command:
useradd [newusername]
Hers on mine was:
Sydney@172.31.28.64

After I set a password with the passwd command. 
passwd Sydney
Enter new UNIX password: sydney123
Retype new UNIX password:sydney123
After, I created a home directory for my guest user.
mkdir /home/Sydney

Then I was able to give her ownership of the home directory created:
chown Sydney /home/Sydney

Sydney did the same thing for me on her beaglebone. My name was Kaela@172.20.10.7.

We were able to connect to our respective users with no problem.

After, we logged into our respective root users.

Following this, we got into the creation of public/private keys to
make our connections more secure. The following notes our process:

command: ssh-keygen
This command allowed us to generate a private and public key. After receiving this
information, it was time to copy this to the remote server.
Enter file in which to save the key (/home/root/.ssh/id_rsa): id_rsa 
Enter passphrase (empty for no passphrase): kaela123 
Enter same passphrase again: kaela123
Your identification has been saved in id_rsa.
Your public key has been saved in id_rsa.pub.
The key fingerprint is:
49:98:24:90:62:61:75:64:31:0d:f9:5d:6f:17:8a:c7 root@beaglebone
The key's randomart image is:
+---[RSA 2048]----+
| o++oB*          |
|o.. o+.+   .   . |
|..    + o . + . .|
|       o o . E . |
|        S   o .  |
|                 |
|                 |
|                 |
|                 |
+-----------------+

command: ssh-copy-id 
This is when we used this command. It allowed for us to copy the public key to the 
remote server for further use. It immediately followed the creation of 
the keys in the ssh-keygen command.

After executing this command, it was time for my partner to ssh to see 
if everything went well.
What the result was was the computer asking for the passphrase
so that it was able to decrypt the private key. Everything after that
was a success.

As an addition to this project, we also decided to use another command:
ssh-agent (as mentioned in the lab). This was for the computer to remember
the passphrase so that when the user went to log on, the user would not
have to input anything.
In utilizing this command, they ask for the passphrase from ssh-keygen. I
basically continue with this process.
Now, when I log onto the Beaglebone on my partner’s board, I do not have
to use the password. 

We also used port forwarding. I did this by doing the ssh -x command with logging
on to the server to enable the forwarding option.
When I log onto the remote server and input xterm, a shell window was produced 
on my host.

(Note: I also experimentally used ssh-add when I was experimenting with ssh-agent,
this helped with giving the private key to the selected agent).

-----------------------------------------------------------------
hw.txt

1. To answer to the beginning of the question, yes it can be secure. Even
though a person might have been able to observe the public key, 
it would still be fairly difficult. The text is deciphered with a private
key, which is only accessible locally on the end of the remote server 
(the server asking for the password).
1)
In this situation, it would be insecure because they could send 
the exact text that would be decrypted. Essentially, it would
be as if they typed in the same keystrokes to begin with.

2)
This connection would also be insecure because having access to the other 
end of the USB would give them the power of being the root user. As a
result, they could obtain all of your keys, IP addresses, set passwords, etc.

 
2. --verify isn't efficient in checking for that tar file because it only
checks the modification of the tar file (signature). It does not give
us access to who created and sent the files. In fixing this problem,
we can introduce an outside party that can check the signatures for 
us. They can look at the movement of the file (who sent the file, who created
the file, etc.)

-----------------------------------------------------------------
hw-pubkey.asc 

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2.0.22 (GNU/Linux)

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
=+KDx
-----END PGP PUBLIC KEY BLOCK-----

--------------------------------------------------------------
hw.tar.gz.sig

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (GNU/Linux)

iQEcBAABAgAGBQJaDya6AAoJEIlEV5+3gABZX7cH/iTLvLTX6cOrJXr3toJLu7dg
xoME010Iy/DsiGN2tfuw1xn3GywILX9j9PC0hpjfFpKFrPKe3PB49WyTHjhnIqh1
Es38OC8FLLSS07L+ikuiMjzDn4oy2782Px0UODKu0Ah1gCT0hxcWUYsxz/qw9i9I
MYzWRuephWpxLGjryJI8rmd2EmcdXCQzhNBixuvNB2vYQuBiqqFKJuoQkg2/UfOI
LvDYJ/OuOdPbF2oMqQSZTNu28Zg70mR1Vr0j1nWZ4caWsdf4cH30olazfHfFq9mK
U1YJEtHMY4zefzYMx4DuwKvWwS2NLTUtYKO92fcrv40iHgRyFJ2wHw2YG68g3mg=
=bbWC
-----END PGP SIGNATURE-----
